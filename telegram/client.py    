# Add imports
import random
import asyncio
from telethon.errors import FloodWaitError, SlowModeWaitError

class TelegramParserClient:
    """Handles Telegram API connections and message retrieval"""
    
    def __init__(self, api_id, api_hash, phone, session_name='monitor_session'):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.session_name = session_name
        self.client = None
        # Add request counters
        self.request_count = 0
        self.last_request_time = 0
        
    async def connect(self):
        """Connect to Telegram API"""
        if self.client is None:
            self.client = TelegramClient(self.session_name, self.api_id, self.api_hash)
            await self.client.start(phone=self.phone)
            logger.info("Connected to Telegram API")
        return self.client
    
    async def disconnect(self):
        """Disconnect from Telegram API"""
        if self.client is not None:
            await self.client.disconnect()
            self.client = None
            logger.info("Disconnected from Telegram API")
    
    async def _rate_limit(self):
        """Implement rate limiting to avoid bans"""
        current_time = time.time()
        
        # Enforce max 30 requests per minute
        if self.request_count >= 20:
            elapsed = current_time - self.last_request_time
            if elapsed < 60:
                # Wait until a minute has passed
                wait_time = 60 - elapsed + random.uniform(1, 3)
                logger.info(f"Rate limiting: Waiting {wait_time:.2f} seconds")
                await asyncio.sleep(wait_time)
                self.request_count = 0
                self.last_request_time = time.time()
        
        # Add random delay between 0.5-2 seconds for each request
        await asyncio.sleep(random.uniform(0.5, 2))
        
        # Increment request counter
        self.request_count += 1
        self.last_request_time = time.time()
    
    async def get_channel_info(self, channel_username):
        """Get basic information about a channel"""
        if self.client is None:
            await self.connect()
            
        try:
            # Apply rate limiting
            await self._rate_limit()
            
            channel_entity = await self.client.get_entity(channel_username)
            
            # Small delay
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # Apply rate limiting again
            await self._rate_limit()
            
            channel_full = await self.client(GetFullChannelRequest(channel=channel_entity))
            
            return {
                'id': channel_entity.id,
                'username': channel_username,
                'title': channel_entity.title,
                'about': channel_full.full_chat.about,
                'members_count': channel_full.full_chat.participants_count if hasattr(channel_full.full_chat, 'participants_count') else None
            }
        except FloodWaitError as e:
            logger.warning(f"FloodWaitError: Need to wait {e.seconds} seconds")
            await asyncio.sleep(e.seconds)
            # Retry after waiting
            return await self.get_channel_info(channel_username)
        except Exception as e:
            logger.error(f"Error getting channel info for {channel_username}: {e}")
            return None
    
    async def get_channel_posts(self, channel_username, limit=10, offset_id=0):
        """Get recent posts from a channel with engagement metrics"""
        if self.client is None:
            await self.connect()
            
        try:
            # Apply rate limiting
            await self._rate_limit()
            
            channel_entity = await self.client.get_entity(channel_username)
            
            # Small delay after getting entity
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # Fetch messages in smaller batches with delays between
            all_messages = []
            remaining = limit
            current_offset = offset_id
            
            while remaining > 0:
                batch_size = min(5, remaining)  # Get max 5 messages at once
                
                # Apply rate limiting before each batch
                await self._rate_limit()
                
                messages = await self.client.get_messages(
                    channel_entity, 
                    limit=batch_size,
                    offset_id=current_offset
                )
                
                if not messages:
                    break
                    
                all_messages.extend(messages)
                
                # Update offset for next batch
                current_offset = messages[-1].id
                remaining -= len(messages)
                
                # Add delay between batches
                if remaining > 0:
                    await asyncio.sleep(random.uniform(1, 3))
            
            # Process the messages
            result = []
            for msg in all_messages:
                # Extract post data
                post_data = {
                    'id': msg.id,
                    'date': msg.date.isoformat(),
                    'text': msg.text,
                    'views': getattr(msg, 'views', 0),
                    'forwards': getattr(msg, 'forwards', 0),
                    'reactions': []
                }
                
                # Add reactions if available
                if hasattr(msg, 'reactions') and msg.reactions:
                    for reaction in msg.reactions.results:
                        post_data['reactions'].append({
                            'emoji': reaction.reaction.emoticon,
                            'count': reaction.count
                        })
                
                result.append(post_data)
            
            return result
        except FloodWaitError as e:
            logger.warning(f"FloodWaitError: Need to wait {e.seconds} seconds")
            await asyncio.sleep(e.seconds)
            # Retry after waiting
            return await self.get_channel_posts(channel_username, limit, offset_id)
        except Exception as e:
            logger.error(f"Error getting posts for {channel_username}: {e}")
            return []